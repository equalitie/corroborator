/*global window, document, define */
/* simple event dispatcher module
 * used to pass messages around our app
 */
(function(window, document, undefined) {
  define(
    ['backbone', 'underscore'],
    function(Backbone, _) {
      'use strict';
      var dispatcher = {};
      _.extend(dispatcher, Backbone.Events);
      return dispatcher;
  });
}(window, document));


/*global window, document, define */
/* simple event dispatcher module
 * used to pass messages around our app
 */
define(
  ['bacon'],
  function(Bacon) {
    'use strict';
    var searchBus = new Bacon.Bus(),
        navBus = new Bacon.Bus(),
        navProperty = navBus.toProperty('incident');
    navBus.toEventStream().log();
    searchBus.toEventStream().log();
    return {
      searchBus: searchBus,
      navBus: navBus,
      navProperty: navProperty
    };
  }
);



/*global Bootstrap*/
/**
 * Author Cormac McGuire
 * actor.js
 * Represent a single actor and a group of actors
 * TODO: refactor common logic for all collections
 */
define(
  [
    'jquery', 'underscore', 'backbone',
    'lib/streams'
  ],
  function($, _, Backbone, Streams) {

    // event stream processing helpers

    // particular to actors
    var filterActorResults = function(value) {
      return value.type === 'results_actor';
    };
    var filterActor = function(value) {
      return value.navValue === 'actor';
    };
    var mapSort = function(value) {
      var sortMap = {
        'date': 'actor_created',
        'title': 'fullname_en'
        //'status': '
      };
      return sortMap[value];
    };

    //////////////////////////////////////////////////////////////////////
    // common to all collections
    //////////////////////////////////////////////////////////////////////
    var extractOption = function(value) {
      return value.option;
    };
    var extractResults = function(value) {
      return value.content;
    };
    var filterUnselectAll = function(value) {
      return value.option === 'Clear Selected';
    };
    var filterSelectAll = function(value) {
      return value.option === 'Select All';
    };
    var filterDeleteSelected = function(value) {
      return value.option === 'Delete Selected';
    };
    //////////////////////////////////////////////////////////////////////
    // end common
    //////////////////////////////////////////////////////////////////////

    // Data representations
    //////////////////////////////////////////////////////////////////////
    // Actor Model
    //////////////////////////////////////////////////////////////////////
    var ActorModel = Backbone.Model.extend({
      idAttribute: 'django_id',
      url: function() {
        var base = '/api/v1/actor/';
        if (this.id) {
          base = base + this.id + '/';
        }
        var urlvars = "?format=json&username=" +
        Bootstrap.username + "&api_key=" + Bootstrap.apiKey;
          return base + urlvars;
      }
    });

    //////////////////////////////////////////////////////////////////////
    // Actor Collection
    //////////////////////////////////////////////////////////////////////
    var ActorCollection = Backbone.Collection.extend({
      model: ActorModel,
      compareField: 'actor_created',
      initialize: function() {
        this.watchSearchResults();
        this.watchSelection();
        this.watchSort();
      },
      comparator: function(model) {
        return model.get(this.compareField);
      },
      setComparatorField: function() {
      },
      watchSearchResults: function() {
        var self = this;
        Streams.searchBus.toProperty()
               .filter(filterActorResults)
               .map(extractResults)
               .onValue(function(results) {
                 self.reset(results);
               });
      },

      watchSelection: function() {
        var self = this;
        var actorStream = Streams.searchBus.filter(filterActor);

        actorStream.filter(filterSelectAll)
          .onValue(function() {
          self.selectAll();
        });
        actorStream.filter(filterUnselectAll)
          .onValue(function() {
          self.unSelectAll();
        });
        actorStream.filter(filterDeleteSelected)
          .onValue(function() {
          self.deleteSelected();
        });
      },

      //
      // listen for sort request events
      // originate from header.js in SolrSearch views
      //
      watchSort: function() {
        var self = this;
        Streams.searchBus.filter(function(value) {
          return value.type === 'filter_view_combined';
        })
        .filter(filterActor)
        .map(extractOption)
        .map(mapSort)
        .onValue(function (value) {
          console.log(self.at(0));
          self.compareField = value;
          self.sort();
        });
      },

      //////////////////////////////////////////////////////////////////////
      // common to all collections
      //////////////////////////////////////////////////////////////////////

      // 
      // change the selected state of a single model
      //
      toggleSelection: function(model, checked) {
        model.set({checked: checked});
      },

      // 
      // delete selected models
      //
      deleteSelected: function() {
        var getSelected = function(model) {
          return model.get('checked') === 'checked';
        };
        var deleteModel = function(model) {
          model.destroy();
        };
        _.each(this.filter(getSelected), deleteModel);
      },

      selectAll: function() {
        console.log('selectAll');
        this.each(function(model) {
          this.toggleSelection(model, 'checked');
        }, this);
      },
      unSelectAll: function(model) {
        this.each(function(model) {
          this.toggleSelection(model, '');
        }, this);
      }
      //////////////////////////////////////////////////////////////////////
      // end common
      //////////////////////////////////////////////////////////////////////
    });


    return {
      ActorCollection: ActorCollection,
      ActorModel: ActorModel
    };
});

/*global Bootstrap*/
/**
 * Author Cormac McGuire
 * bulletin.js
 * Represent a single bulletin and a group of bulletins
 * TODO: refactor common logic for all collections
 */
define(
  [
    'jquery', 'underscore', 'backbone',
    'lib/streams'
  ],
  function($, _, Backbone, Streams) {
    'use strict';

    var filterBulletin = function(value) {
      return value.navValue === 'bulletin';
    };

    var filterBulletinResults = function(value) {
      return value.type === 'results_bulletin';
    };
    var mapSort = function(value) {
      var sortMap = {
        'date': 'bulletin_created',
        'title': 'title_en',
        'score': 'confidence_score'
        //'status': ''
      };
      return sortMap[value];
    };
    //////////////////////////////////////////////////////////////////////
    // common to all collections
    //////////////////////////////////////////////////////////////////////
    var extractOption = function(value) {
      return value.option;
    };
    var extractResults = function(value) {
      return value.content;
    };
    var filterUnselectAll = function(value) {
      return value.option === 'Clear Selected';
    };
    var filterSelectAll = function(value) {
      return value.option === 'Select All';
    };
    var filterDeleteSelected = function(value) {
      return value.option === 'Delete Selected';
    };
    //////////////////////////////////////////////////////////////////////
    // end common
    //////////////////////////////////////////////////////////////////////

    var BulletinModel = Backbone.Model.extend({
      idAttribute: 'django_id',
      url: function() {
        var base = '/api/v1/bulletin/';
        if (this.id) {
          base = base + this.id + '/';
        }
        var urlvars = "?format=json&username=" +
        Bootstrap.username + "&api_key=" + Bootstrap.apiKey;
          return base + urlvars;
      }
    });

    var BulletinCollection = Backbone.Collection.extend({
      compareField: 'bulletin_created',
      model: BulletinModel,
      initialize: function() {
        this.watchEventStream();
        this.watchSelection();
        this.watchSort();
      },
      comparator: function(model) {
        return model.get(this.compareField);
      },
      watchEventStream: function() {
        var self = this;
        Streams.searchBus.toProperty()
               .filter(filterBulletinResults)
               .map(extractResults)
               .onValue(function(results) {
                 self.reset(results);
               });
      },
      watchSelection: function() {
        var self = this;
        var bulletinStream = Streams.searchBus.filter(filterBulletin);

        bulletinStream.filter(filterSelectAll)
          .onValue(function() {
          self.selectAll();
        });
        bulletinStream.filter(filterUnselectAll)
          .onValue(function() {
          self.unSelectAll();
        });
        bulletinStream.filter(filterDeleteSelected)
          .onValue(function() {
          self.deleteSelected();
        });
      },
      watchSort: function() {
        var self = this;
        Streams.searchBus.filter(function(value) {
          return value.type === 'filter_view_combined';
        })
        .filter(filterBulletin)
        .map(extractOption)
        .map(mapSort)
        .onValue(function (value) {
          self.compareField = value;
          self.sort();
        });
      },

      toggleSelection: function(model, checked) {
        model.set({checked: checked});
      },

      deleteSelected: function() {
        var getSelected = function(model) {
          return model.get('checked') === 'checked';
        };
        var deleteModel = function(model) {
          model.destroy();
        };
        _.each(this.filter(getSelected), deleteModel);
      },

      selectAll: function() {
        this.each(function(model) {
          this.toggleSelection(model, 'checked');
        }, this);
      },
      unSelectAll: function(model) {
        this.each(function(model) {
          this.toggleSelection(model, '');
        }, this);
      }
    });

  return {
    BulletinModel: BulletinModel,
    BulletinCollection: BulletinCollection
  };

});


define(
  [
    'jquery', 'underscore', 'backbone',
    'lib/streams',
    'lib/Data/actor',
    'lib/Data/bulletin',
    'lib/Data/incident'
  ],
  function($, _, Backbone, Streams, Actor, Bulletin, Incident) {
    var actorCollection = new Actor.ActorCollection();
    var bulletinCollection = new Bulletin.BulletinCollection();
    var incidentCollection = new Incident.IncidentCollection();

  return {
    ActorCollection: actorCollection,
    BulletinCollection: bulletinCollection,
    IncidentCollection: incidentCollection
  };

});

/*global Bootstrap*/
/**
 * Author Cormac McGuire
 * bulletin.js
 * Represent a single bulletin and a group of bulletins
 * TODO: refactor common logic for all collections
 */
define(
  [
    'jquery', 'underscore', 'backbone',
    'lib/streams'
  ],
  function($, _, Backbone, Streams) {
    'use strict';

    var filterIncident = function(value) {
      return value.navValue === 'incident';
    };

    var filterIncidentResults = function(value) {
      return value.type === 'results_incident';
    };
    var mapSort = function(value) {
      var sortMap = {
        'date': 'bulletin_created',
        'title': 'title_en',
        'score': 'confidence_score'
        //'status': ''
      };
      return sortMap[value];
    };

    //////////////////////////////////////////////////////////////////////
    // common to all collections
    //////////////////////////////////////////////////////////////////////
    var extractOption = function(value) {
      return value.option;
    };
    var extractResults = function(value) {
      return value.content;
    };
    var filterUnselectAll = function(value) {
      return value.option === 'Clear Selected';
    };
    var filterSelectAll = function(value) {
      return value.option === 'Select All';
    };
    var filterDeleteSelected = function(value) {
      return value.option === 'Delete Selected';
    };
    //////////////////////////////////////////////////////////////////////
    // end common
    //////////////////////////////////////////////////////////////////////


    var IncidentModel = Backbone.Model.extend({
      idAttribute: 'django_id',
      url: function() {
        var base = '/api/v1/incident/';
        if (this.id) {
          base = base + this.id + '/';
        }
        var urlvars = "?format=json&username=" +
        Bootstrap.username + "&api_key=" + Bootstrap.apiKey;
          return base + urlvars;
      }

    });

    var IncidentCollection = Backbone.Collection.extend({
      model: IncidentModel,
      initialize: function() {
        this.watchEventStream();
        this.watchSelection();
        this.watchSort();
      },
      watchEventStream: function() {
        var self = this;
        Streams.searchBus.toProperty()
               .filter(filterIncidentResults)
               .map(extractResults)
               .onValue(function(results) {
                 self.reset(results);
               });
      },
      watchSelection: function() {
        var self = this;
        var incidentStream = Streams.searchBus.filter(filterIncident);

        incidentStream.filter(filterSelectAll)
          .onValue(function() {
            self.selectAll();
          });
        incidentStream.filter(filterUnselectAll)
          .onValue(function() {
            self.unSelectAll();
          });
        incidentStream.filter(filterDeleteSelected)
          .onValue(function() {
            self.deleteSelected();
          });
      },
      watchSort: function() {
        var self = this;
        Streams.searchBus.filter(function(value) {
          return value.type === 'filter_view_combined';
        })
        .filter(filterIncident)
        .map(extractOption)
        .map(mapSort)
        .onValue(function (value) {
          self.compareField = value;
          self.sort();
        });
      },

      toggleSelection: function(model, checked) {
        model.set({checked: checked});
      },

      deleteSelected: function() {
        var getSelected = function(model) {
          return model.get('checked') === 'checked';
        };
        var deleteModel = function(model) {
          model.destroy();
        };
        _.each(this.filter(getSelected), deleteModel);
      },

      selectAll: function() {
        this.each(function(model) {
          this.toggleSelection(model, 'checked');
        }, this);
      },
      unSelectAll: function(model) {
        this.each(function(model) {
          this.toggleSelection(model, '');
        }, this);
      }

    });

  return {
    IncidentModel: IncidentModel,
    IncidentCollection: IncidentCollection
  };


});


/*global define, Bacon */
/**
### combo
represent a combo box 
reacts to the being pressed - sends the model that has been pressed in the event

collection contains the elements to be displayed

When creating an instance of the view, you can either pass in the element to watch
or have one rendered.



you may also pass a custom event dispatcher which will be used instead of the 
global dispatcher for sending events

TODO: define template for the view
*/
define(
  [
    // vendor
    'jquery', 'backbone', 'handlebars',
    // templates
    'lib/elements/templates/combo-outer.tpl',
    'lib/elements/templates/combo-inner.tpl'
  ],
  function ($, Backbone, Handlebars, Bacon, co, ci) {
    'use strict';
    // ##
    var collection = Backbone.Collection.extend();

    // ## used to render an item from the collection passed in
    var ItemView = Backbone.View.extend({
      events: {
        'click': 'itemClicked'
      },
      initialize: function(options) {
        this.eventIdentifier = options.eventIdentifier;
        this.bus = options.bus;
        this.template = Handlebars.templates['combo-inner.tpl'];
        this.render();
      },
      itemClicked: function() {
        //dispatcher.trigger('item_clicked', this.model);
        if (this.bus) {
          this.bus.push({
            type: this.eventIdentifier,
            content: this.model
          });
        }
      },
      render: function() {
        var html = this.template(this.model.toJSON());
        this.$el = $(html);
        this.setElement(this.$el);
      }
    });

    // ### Combo view
    var ComboView = Backbone.View.extend({
      eventIdentifier: 'combo',
      events: {
        'click .combo-main': 'mainElementClicked'
      },

      // init the view setting the default item if provided
      initialize: function(options) {
        if (options.primary) {
          this.setPrimary(options.primary);
        }
        this.bus = options.bus;
        this.template = Handlebars.templates['combo-outer.tpl'];
        // re-render the combo box if the collection changes
        this.collection.on('add remove reset', this.render, this);
      },

      mainElementClicked: function() {
        this.bus.push(this.primary);
      },


      setPrimary: function(primary) {
        this.primary = new Backbone.Model({
          name_en: primary.name_en,
          search_request: primary.search_request,
          type: 'search'
        });
      },

      // render the list contents
      render: function() {
        var html = this.template(this.primary.toJSON());
        this.$el.children().remove();
        this.$el.append(html);
        this.renderList();
      },

      // iterate over our collection
      renderList: function() {
          this.collection.each(this.renderListItem, this);
      },

      // render each item in the list 
      renderListItem: function(model, index, list) {
        var options = {
          model: model,
          eventIdentifier: this.eventIdentifier
        };
        if (this.bus) {
          options.bus = this.bus;
        }
        var itemView = new ItemView(options);
        this.$el.children().children('ul').append(itemView.$el);
      }
    });


    // expose our view as a module export
    return {
      view: ComboView,
      collection: collection
    };
});


/*global define */
/**
### input
represent an input field, reacts to the enter button being pressed
when focus is on the input by sending the content of the input box
in the enter_pressed event

When creating an instance of the view, you can either pass in the element to watch
or have one rendered.
you may also pass a custom event dispatcher which will be used instead of the 
global dispatcher for sending events

TODO: define template for the view
*/
define(
  [
    'jquery', 'jquery_ui',
    'lib/dispatcher'
  ],
  function ($, jquery_ui, dispatcher) {
    'use strict';
    // stores a ref to the dialog dom element
    var dialogElement;

    // called when the dialog Save button is pressed
    var handleSaveSearch = function() {
      $(dialogElement).dialog('close');
    };

    // called when the dialog Cancel button is pressed
    var handleClose = function() {
      $(dialogElement).dialog('close');
    };

    var resetError = function() {};

    // open the dialog
    var openDialog = function () {
      $(dialogElement).dialog('open');
    };

    var createDialog = function () {
      $(dialogElement).dialog({
        autoOpen: false,
        height: 200,
        width: 350,
        modal: true,
        buttons: {
          'Save Search': handleSaveSearch,
          'Cancel': handleClose
        },
        close: resetError
      });
    };

    var init = function (openEvent, dialogId) {
      dialogElement = dialogId;
      dispatcher.on(openEvent, openDialog);
      createDialog();
    };


    // expose our init function as a module export
    return {
      init: init
   };
});



/*global window, define */
/**
### input
represent an input field, reacts to the enter button being pressed
when focus is on the input by sending the content of the input box
in the enter_pressed event

When creating an instance of the view, you can either pass in the element to
watch or have one rendered.
you may also pass a custom event dispatcher which will be used instead of the 
global dispatcher for sending events

TODO: define template for the view
*/
define(
  [
    'jquery', 'underscore', 'backbone', 'bacon',
    'lib/dispatcher',
    'bacon_ui'
  ],
  function ($, _, Backbone, Bacon, dispatcher) {
    'use strict';
    var InputView = Backbone.View.extend({
      // declare the events that we will listen for
      events:{
        'keyup input': 'pressed',
        'click .do-clear': 'clearInput'
      },
      // create our template function
      // initialize is called when the view is instantiated
      // the element being represented is passed in when it is intialised
      initialize: function(options) {
        if (options.dispatcher !== undefined) {
          dispatcher = options.dispatcher;
        }
        this.createProperty();
        dispatcher.on('clear_input', this.clearInput, this);
        this.template = _.template('<input type="textfield">');
      },
      clearInput: function() {
        this.$el.children('input').val('');
      },
      createProperty: function() {
        this.textProperty = Bacon.UI.textFieldValue(this.$el.children('input'))
          //.map(this.textLength)
          .map(function(inputText) {
            return {
              raw: inputText,
              encoded: window.encodeURI(inputText)
            };
          })
          .debounce(300);
      },
      textLength: function(text) {
        if (text.length > 3) {
          return text;
        }
        return '';
      },
      // catch the keyup event
      pressed: function(e) {
        if (e.keyCode === 13) {
          this.sendText(this.$el.children('input').val());
        }
      },
      // dispatch event with contents of the input field
      sendText: function(inputText) {
        var textToSend = {
          raw: inputText,
          encoded: window.encodeURI(inputText)
        };
        dispatcher.trigger('enter_pressed', textToSend);

      },
      render: function() {
        var html = this.template();
        this.$el.append(html);
        return this;
      }
    });
    // expose our view as a module export
    return InputView;
});

/**
 * Author: Cormac McGuire
 * language.js
 * Provide functionality to toggle language
 */
define(
  [
    'jquery'
  ],
  function($) {
    var languages = ['en', 'ar'];

    var toggleLanguage = function(clickedElement, i18nElement) {
      var requestedLang = clickedElement.lang,
          remainingLanguages = _.reject(languages, function(lang) {
            return lang === requestedLang;
          }),
          langSelector = _.reduce(remainingLanguages, function(memo, lang) {
            return memo + 'span:lang(' + lang + ')';
          }, '');

        /**
         * the .toggle show is kind of gross but there seems to be a bug
         * whereby the span:lang(<lang>) seems to select the .toggle selector too
         */
         i18nElement.children('span:lang(' + requestedLang + ')')
                    .show()
                    .siblings(langSelector)
                    .hide()
                    .siblings('.toggle').show();
    };

    return {
      toggleLanguage: toggleLanguage
    };

});

/*global window, define, Bacon, Bootstrap */
/**
### combo
represent the combo box in the navigation area

collection contains the elements to be displayed
can be filtered based on 

When creating an instance of the view, you can either pass in the element to watch
or have one rendered.



you may also pass a custom event dispatcher which will be used instead of the 
global dispatcher for sending events

TODO: define template for the view
*/
define(
  [
    // vendor
    'jquery', 'underscore', 'backbone',
    'bacon',
    //
    'lib/streams',
    // local libs
    'lib/elements/combo'
  ],
  function ($, _, Backbone, Bacon, Streams, Combo) {
    'use strict';
    var collection = Backbone.Collection.extend();
    var localBus = new Bacon.Bus();

    var isSearchRequest = function(value) {
      var model = value.content;
      return model.get('type') === 'search';
    };
    var isComboAction = function(value) {
      return value.type === 'nav_combo';
    };
    var isSavedSearch = function(value) {
      var model = value.content;
      return model.get('type') === 'actor' ||
             model.get('type') === 'incident' ||
             model.get('type') === 'bulletin';
    };

    var isSaveSearchRequest = function(value) {
      var model = value.content;
      return model.get('type') === 'default';
    };

    var dispatchSavedSearch = function (value) {
      var model = value.content;
      Streams.searchBus.push({
        type: 'saved_search',
        content: model
      });
    };

    var dispatchSaveSearchRequest = function (value) {
      var model = value.content;
      Streams.searchBus.push({
        type: 'save_search_request',
        content: model
      });
    };
    var dispatchSearchRequest = function (value) {
      var model = value.content;
      Streams.searchBus.push({
        type: 'search_request',
        content: model
      });
    };

    // send saved search events to the main search bus
    localBus.toProperty()
            .filter(isComboAction)
            .filter(isSavedSearch)
            .onValue(dispatchSavedSearch);

    // send save current search request to the main search bus
    localBus.toProperty()
            .filter(isComboAction)
            .filter(isSaveSearchRequest)
            .onValue(dispatchSaveSearchRequest);

    // send search request to the main bus
    localBus.toProperty()
            .filter(isComboAction)
            .filter(isSearchRequest)
            .onValue(dispatchSearchRequest);

    /**
     * check if the element is a new search
     */
    var isSearch = function(value) {
      return value.type === 'new_search';
    };

    /**
     * create the full collection of items to initialise our collection
     * we add the save search item in here
     */
    var createFullCollection = function() {
      var fullCollection = new collection(Bootstrap.predefinedSearchList);
      var item = {
        name_en: 'Save current search...',
        search_request: 'save_search',
        type: 'default'
      };
      fullCollection.add(item);
      return fullCollection;
    };


    // ## Combo view
    var NavComboView = Combo.view.extend({
      filteredCollection: undefined,
      eventIdentifier: 'nav_combo',

      // init the view setting the default item if provided
      initialize: function(options) {
        this.fullCollection = createFullCollection();
        this.collection = this.fullCollection.clone();
        options.bus = localBus;
        Combo.view.prototype.initialize.call(this, options);
        this.handleNavigation();
        this.handleAddSearch();
      },

      /**
       * register a handler for navigation events
       */
      handleNavigation: function() {
        Streams.navBus.toProperty()
            .onValue(this.updateCollection, this);
      },

      /**
       * this function is called in response to a navigate event being pushed
       */
      updateCollection: function(context, value) {
        var self = context,
            models,
            filterFunction;

        filterFunction = function (model) {
          var type = model.get('type');
          return type === value || type === 'default';
        };

        models = self.fullCollection.filter(filterFunction);
        self.collection.reset(models);
      },

      /**
       * filter search events of type new_search
       * this adds new searches to the combo box
       * TODO - handle saving the search
       */
      handleAddSearch: function() {
        var self = this;
        Streams.searchBus.toEventStream().toProperty()
          .filter(isSearch)
          .onValue(function(value) {
            self.fullCollection.add(value.search, { at: self.fullCollection.length - 1 });
            self.collection.add(value.search, { at: self.collection.length - 1 });
        });
        window.searchBus = Streams.searchBus;
      }

    });

    // expose our view as a module export
    return {
      view: NavComboView,
      collection: collection
    };
});


/*global define, Bootstrap */
/**
### TabRouter

handle tab presses

*/
define(
  [
    'jquery', 'backbone',
    'lib/streams',
    'lib/Data/collections'

  ],
  function($, Backbone, Streams, Collections) {
    'use strict';
    var tabRouter,
        tabView;

    /**
     * convert tab link argument to element
     */
    var convertToElement = function(className) {
      return  'li.is-' + className + 's';
    };

    /**
     * ## TabRouter
     *
     * handle tab clicks
     * push an event to the navBus when the user clicks on a tab
     */
    var TabRouter = Backbone.Router.extend({
      routes: {
        'tab/:section': 'openSection'
      },
      openSection: function(section) {
        Streams.navBus.push(section);
      }
    });

    /**
     * ## TabView
     *
     * This represents the three tabs
     * It simply sets the current class on the last clicked
     * tab, in response to a navigation change in the router above
     * it has no real backbone functionality, we could either get rid of this
     * or the router 
     */
    var TabView = Backbone.View.extend({
      el: '.tabs ul',
      initialize: function() {
        Streams.navBus.toEventStream()
                      .toProperty()
                      .map(convertToElement)
                      .onValue(this.updateTabClass);
        this.watchCollectionCounts();
      },
      watchCollectionCounts: function() {
        Collections.BulletinCollection.on('add destroy reset', function() {
          $('.bulletin-count').empty()
                              .append(Collections.BulletinCollection.length);
        }, this);
        Collections.ActorCollection.on('add destroy change reset', function() {
          $('.actor-count').empty()
                           .append(Collections.ActorCollection.length);
        }, this);
        Collections.IncidentCollection.on('add destroy reset', function() {
          $('.incident-count').empty()
                              .append(Collections.IncidentCollection.length);
        }, this);
      },

      updateTabClass: function(el) {
        $(el).siblings().removeClass('current');
        $(el).addClass('current');
      }

    });

    // create our objects
    var init = function(navBus) {
      tabView = new TabView();
      tabRouter = new TabRouter({navBus: navBus});
      Backbone.history.start();
      return tabRouter;
    };

    return {
      init: init
    };
  }
);

/*global define, Bootstrap */
/**
### main

main entry point for the Navigation module 
We will define and manage events from the various components within this section

bacon.js EventStreams are used to build more functionality into our events
Certain events must happen in combination before they are propogated
For example:
To search, the user must have entered text into the input box
and press the search button

To save the search requires the similar requirements

Save Search, Search and tab events will be propogated around the whole application

A module level event dispatcher is created and passed to all modules referenced here. 
In this way we can ensure events do not leak between our main modules


*/
define(
  [
    'underscore',
    'lib/elements/input',
    'lib/Navigation/NavCombo',
    'lib/elements/dialog',
    'lib/Navigation/TabRouter',
    'lib/streams'
  ],
  function(_, InputView, NavCombo, Dialog, TabRouter, Streams) {
    'use strict';
    var textEntered,
        textProperty;

    // create our combo box view
    var createComboBox = function() {
      var Comboview = new NavCombo.view({
        el: '.search-combo',
        primary: {
          name_en: 'Search',
          search_request: 'search_request'
        }
      });
      // add the save item
      Comboview.render();
    };

    var nonEmpty = function(x) {
      return x.encoded.length > 0;
    };
    //var and

    // create the input view that will read in a search from the user
    var createInputView = function () {
      var inputView = new InputView({
        el: '.search'
      });
      textEntered = inputView.textProperty.map(nonEmpty);
      textProperty = inputView.textProperty;
    };

    var watchForSearch = function() {
      var searchRequested = Streams.searchBus.filter(function(e){
        return e.type === 'search_request';
      })
      .map(function(e) {
        return {
          search_request: e.type === 'search_request'
        };
      });

      var merged = searchRequested.merge(textProperty.toEventStream());
      var navStream = Streams.navBus.toEventStream().map(function(value) {
        return {
          domain: value
        };
      });
      merged = merged.merge(navStream);

      merged.scan({}, function(oldResult, value) {
        var newResult = oldResult;
        if (value.encoded) {
          newResult.search = value;
          newResult.type = 'intermediate';
        }
        if (value.domain) {
          newResult.domain = value.domain;
          newResult.type = 'intermediate';
        }
        if (value.search_request === true) {
          newResult.type = 'new_search';
        }
        return newResult;
         
      }).filter(function(value) {
        return value.type === 'new_search' && value.search !== undefined;
      }).onValue(function(value) {
        Streams.searchBus.push(value);
      });
    };

    // create the dialog that we will use to save a user's search
    var createDialog = function () {
      Dialog.init('item_clicked', '#search-dialog-form');
    };

    // init function used to instantiate the objects required to get 
    // things running
    var init = function () {
      createComboBox();
      createInputView();
      watchForSearch();
      TabRouter.init();
      createDialog();
    };

    return {
      init: init
    };
  }
);

define(
  [
    'underscore',
    'lib/streams',
    'core/AbstractTextWidget'
  ],
  function(_, Streams) {
    var actorFields = [
          'age_en_exact',
          'sex_en_exact',
          'civilian_en_exact',
          'nationality_en_exact'
        ],
        bulletinFields = [
          'bulletin_labels_exact',
          'bulletin_assigned_exact',
          'most_recent_status_bulletin_exact',
          'sources_exact'
        ],
        incidentFields = [
          'incident_labels_exact', 
          'incident_assigned_exact',
          'crimes_exact',
          'most_recent_status_incident_exact'
        ],

        filterActors = function(element) {
          return element.django_ct.search(/actor/) > -1;
        },

        filterBulletin = function(element) {
          return element.django_ct.search(/bulletin/) > -1;
        },

        filterIncident = function(element) {
          return element.django_ct.search(/incident/) > -1;
        };

    //////////////////////////////////////////////////////////////////////
    // AJAX SOLR SEARCH WIDGET
    //////////////////////////////////////////////////////////////////////
    var TextWidget = AjaxSolr.AbstractTextWidget.extend({
      init: function () {
        
      },

      afterRequest: function () {
        console.log(this.manager.response);
        
        var searchResults = this.manager.response.response.docs;
        // pull the various 
        var actors = _.filter(searchResults, filterActors);
        Streams.searchBus.push({
          type: 'results_actor',
          content: actors
        }); 
        var bulletins = _.filter(searchResults, filterBulletin);
        Streams.searchBus.push({
          type: 'results_bulletin',
          content: bulletins
        }); 
        var incidents = _.filter(searchResults, filterIncident);
        Streams.searchBus.push({
          type: 'results_incident',
          content: incidents
        }); 
      }
    });

    return TextWidget;

});


/*global window, document, define, Bootstrap */
define(
  [
    'lib/SolrSearch/widgets/manager',
    'lib/SolrSearch/views/header',
    'lib/SolrSearch/views/results',
    'lib/Data/collections'
  ],
  function(SolrManager, Header, Results, Collections) {
    'use strict';
    var headerView;

    var init = function() {
      headerView = new Header.HeaderView();
      Results.init();
      SolrManager.doRequest();


    };
    return {
      init: init
    };
    
  }
);

/*global define, Bacon */
/**
### filters.js

This displays the filter view
it provides:
- feedback on the number of actors selected
- filtering for the search results
- a menu to select/unselect all, create new, or update

*/
define(
  [
    // vendor
    'jquery', 'backbone', 'handlebars',
    // streams
    'lib/streams',
    // elements
    'lib/elements/combo',
    //data
    'lib/Data/collections'
    // templates
  ],

  function ($, Backbone, Handlebars, Streams, Combo, Collections) {
    //////////////////////////////////////////////////////////////////////
    // STREAM PROCESSING HELPERS
    //////////////////////////////////////////////////////////////////////


    //////////////////////////////////////////////////////////////////////
    // ACTOR FILTER VIEW
    //////////////////////////////////////////////////////////////////////
    var ActorFilterView = Backbone.View.extend({
      initialize: function() {},
      render: function() {}

    });


    //////////////////////////////////////////////////////////////////////
    // BULLETIN FILTER VIEW
    //////////////////////////////////////////////////////////////////////
    var BulletinFilterView = Backbone.View.extend({
      initialize: function() {},
      render: function() {}

    });


    //////////////////////////////////////////////////////////////////////
    // INCIDENT FILTER VIEW
    //////////////////////////////////////////////////////////////////////
    var IncidentFilterView = Backbone.View.extend({
      initialize: function() {},
      render: function() {}

    });
});

/*global define, Bacon */
/**
### header.js

This displays the header view
it provides:
- feedback on the number of actors selected
- filtering for the search results
- a menu to select/unselect all, create new, or update

*/
define(
  [
    // vendor
    'jquery', 'backbone', 'handlebars',
    // streams
    'lib/streams',
    // elements
    'lib/elements/combo',
    //data
    'lib/Data/collections',
    // templates
    'lib/SolrSearch/templates/header.tpl',
    'lib/SolrSearch/templates/header-count.tpl',
    'lib/SolrSearch/templates/filters.tpl'
  ],
  function ($, Backbone, Handlebars, Streams, Combo, Collections) {
    'use strict';
    //////////////////////////////////////////////////////////////////////
    // Stream processing functions
    //////////////////////////////////////////////////////////////////////
    var filterSort = function(value) {
      return value.type === 'filter_view';
    };
    var getSortType = function(value) {
      return {
        option: value.sort
      };
    };
    var filterActions = function(value) {
      return value.type === 'action_combo';
    };
    var extractResults = function(value) {
      return value.content;
    };

    var getActionType = function(model) {
     return {
       option: model.get('name_en')
     };
    };
    // used to combine nav and action combo events
    var combineBoth = function(previous, newValue) {
      if (newValue.hasOwnProperty('navValue')) {
        previous.navValue = newValue.navValue;
        previous.action = false;
      }
      if (newValue.hasOwnProperty('option')) {
        previous.option = newValue.option;
        previous.action = true;
      }
      return previous;
    };
    var filterExecuteAction = function(value) {
      return value.action === true;
    };

    // map navigation event into a wrapped one
    var createNavProperty = function() {
      var mapNav = function(value) {
        return { navValue: value };
      };
      return Streams.navBus
                    .toEventStream()
                    .map(mapNav);
    };
    // distinguish between new nav and action events
    var identifyNewAction = function(previous, newValue) {
      return previous.option === newValue.option;
    };
    
    //////////////////////////////////////////////////////////////////////
    // END STREAM PROCESSING FUNCTIONS
    //////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////
    // VIEWS
    //////////////////////////////////////////////////////////////////////

    // collection of menu items for the action combo
    var menuItems = new Backbone.Collection([
      { name_en: 'Delete Selected' },
      { name_en: 'Update Selected' },
      { name_en: 'Select All' },
      { name_en: 'Clear Selected' }
    ]);

    //////////////////////////////////////////////////////////////////////
    // ACTION COMBO VIEW
    //////////////////////////////////////////////////////////////////////
    var ActionComboView = Combo.view.extend({
      eventIdentifier: 'action_combo',
      el: '.actions',
      initialize: function(options) {
        Combo.view.prototype.initialize.call(this, options);
        this.collection = options.collection;
        this.propogateEvents();
      },

      /**
       * register a handler for navigation events
       */
      propogateEvents: function() {
        var self = this;

        var selectStream = Streams.searchBus.toEventStream()
                           .filter(filterActions)
                           .map(extractResults)
                           .map(getActionType);

        var both = selectStream.merge(createNavProperty());
        var watcher = both.scan({
                            type: self.eventIdentifier + '_combined'
                          }, combineBoth);
        watcher.filter(filterExecuteAction)
               .onValue(function(value) {
                  Streams.searchBus.push(value);
                });

      }
    });

    //////////////////////////////////////////////////////////////////////
    // NUMBER OF ELEMENTS SELECTED VIEW
    //////////////////////////////////////////////////////////////////////
    var ElementsSelectedView = Backbone.View.extend({
      el: '#number-selected',
      initialize: function() {
        this.template = Handlebars.templates['header-count.tpl'];
        this.collections = {
          'actor': Collections.ActorCollection,
          'bulletin': Collections.BulletinCollection,
          'incident': Collections.IncidentCollection
        };
        this.watchNav();
      },
      watchNav: function() {
        var self = this;
        createNavProperty().onValue(function(value) {
          self.collection = self.collections[value.navValue];
          self.collection.on('change updateSelected', self.render, self);
          self.collectionName = value.navValue;
          self.render();
        });
                           
      },
      pluralise: function(word, number) {
        if (number !== 1) {
          word = word + 's';
        }
        return word;
      },
      render: function() {
        var numItems = 
          this.collection.filter(function(model) {
            return model.get('checked') === 'checked';
          }).length;
        var html = this.template({
          domain:   this.pluralise(this.collectionName, numItems),
          numItems: numItems
        });
        this.$el.empty()
                .append(html);

        return this;
      }

    });

    //////////////////////////////////////////////////////////////////////
    // FILTER VIEW
    //////////////////////////////////////////////////////////////////////
    
    var FilterView = Backbone.View.extend({
      el: 'tr.filters',
      eventIdentifier: 'filter_view',
      variableFilter: 'location',
      events: {
        'click a': 'handleFilter',
        'click .date': 'sortDate',
        'click .location': 'sortLocation',
        'click .age': 'sortAge',
        'click .title': 'sortTitle',
        'click .status': 'sortStatus',
        'click .score': 'sortScore'
      },
      initialize: function() {
        this.template = Handlebars.templates['filters.tpl'];
        this.watchSortEvents();
        this.watchNavEvents();
        this.render();
      },

      // handle sort events from headers
      sortDate: function() {
        this.sendSortEvent('date');
      },
      sortLocation: function() {
        this.sendSortEvent('location');
      },
      sortAge: function() {
        this.sendSortEvent('age');
      },
      sortTitle: function() {
        this.sendSortEvent('title');
      },
      sortStatus: function() {
        this.sendSortEvent('status');
      },
      sortScore: function() {
        this.sendSortEvent('score');
      },

      sendSortEvent: function(sortEventName) {
        Streams.searchBus.push({
          type: this.eventIdentifier,
          content: {
            sort: sortEventName
          }
        });
      },
      // watch for nav to actor - swap out filters when change to and from
      watchNavEvents: function() {
        var self = this;
        var filterMap = {
          actor: 'age',
          bulletin: 'location',
          incident: 'location'
        };
        createNavProperty()
          .onValue(function(value) {
            self.variableFilter = filterMap[value.navValue];
            self.render();
          });
      },

      watchSortEvents: function() {
        var self = this;

        var selectStream = Streams.searchBus.toEventStream()
                           .filter(filterSort)
                           .map(extractResults)
                           .map(getSortType);

        var both = selectStream.merge(createNavProperty());
        var watcher = both.scan({
                            type: self.eventIdentifier + '_combined'
                          }, combineBoth);
        watcher.filter(filterExecuteAction)
               .onValue(function(value) {
                  Streams.searchBus.push(value);
                });

      },

      handleFilter: function(e) {
        e.preventDefault();
        $(e.currentTarget).parent()
                          .siblings()
                          .children()
                          .removeClass('current')
                          .removeClass('is-descending');

        $(e.currentTarget).parent()
                          .children()
                          .removeClass('current')
                          .removeClass('is-descending');

        $(e.currentTarget).addClass('current').addClass('is-descending');
      },
      render: function() {
        var html = this.template({variableFilter: this.variableFilter});
        this.$el.empty()
                .append(html);
      }
    });

    // ## used to render the header container view
    // renders the ElementsSelectedView and the ActionComboView subviews
    var HeaderView = Backbone.View.extend({
      el: '.search-header',
      eventIdentifier: 'header_view',

      initialize: function(options) {
        this.template = Handlebars.templates['header.tpl'];
        this.comboView = new ActionComboView({
          collection: menuItems,
          bus: Streams.searchBus,
          primary: {
            name_en: 'Actions',
            search_request: 'none'
          }
        });
        this.on('sortEvent', this.publishSort, this);
        this.render();
        this.renderFilterBox();
      },


      render: function() {
        var header = this.template({domain: 'incidents'});
        this.$el.append(header);
        this.renderSelectedCount();
        this.renderComboBox();
      },
      //render the number selected box
      renderSelectedCount: function() {
        var countView = new ElementsSelectedView({
        });
      },
      // render the actions
      renderComboBox: function() {
        // needed because actions div has just been rendered
        this.comboView.setElement('.actions');
        this.comboView.render();
      },
      renderFilterBox: function() {
        var filterView = new FilterView();
      }
    });


    // expose our view as a module export
    return {
      HeaderView: HeaderView
    };
});

/**
 * Author: Cormac McGuire
 * results.js
 * Display the results for actors, bulletins and incidents
 */
define(
  [
    'jquery', 'underscore', 'backbone', 'handlebars',
    'lib/streams',
    'lib/Data/collections',
    'lib/elements/language',
    'lib/SolrSearch/templates/actor.tpl',
    'lib/SolrSearch/templates/actor-results.tpl',
    'lib/SolrSearch/templates/bulletin.tpl',
    'lib/SolrSearch/templates/bulletin-results.tpl',
    'lib/SolrSearch/templates/incident.tpl',
    'lib/SolrSearch/templates/incident-results.tpl'
  ],
  function($, _, Backbone, Handlebars, Streams, Collections, Language) {
    'use strict';
    var extractResults = function(value) {
      return value.content;
    };

    ///////////////////////////////////////////////////////////////////////////
    // ## ACTOR LIST DISPLAY
    ///////////////////////////////////////////////////////////////////////////

    //render an individual result
    var ActorResultView = Backbone.View.extend({
      tagName: 'li',
      events: {
        'click .actor-content': 'expandActor',
        'click .toggle lang:(ar)': 'showArabic',
        'click .toggle lang:(en)': 'showEnglish',
        'click input[type="checkbox"]': 'selectActor'
      },
      initialize: function(options) {
        this.index = options.index;
        this.template = Handlebars.templates['actor.tpl'];
        this.model.on('change', this.render, this);
        this.model.on('destroy', this.destroy, this);
        this.render();
      },
      expandActor: function() {
        this.$el.children()
                .children()
                .children()
                .children('.actor-long-summary, .actor-summary')
                .toggleClass('hidden');
      },
      selectActor: function(e) {
        var checked = (this.model.get('checked') !== 'checked') ? 'checked' : '';
        this.model.set({checked: checked}, {silent: true});
        this.model.collection.trigger('change');
      },
      render: function() {
        this.$el.empty();
        var pos = this.index % 2 === 1 ? 'right': 'left';
        var html = this.template({
          model: this.model.toJSON(),
          pos:pos
        });
        this.$el.addClass('result');
        this.$el.append(html);
        return this;
      },
      destroy: function() {
        this.undelegateEvents();
        this.remove();
      }

    });

    // Show the results of a search for actors
    var ActorResultsView = Backbone.View.extend({
      el: '.body',
      childViews: [],
      initialize: function() {
        this.collection = Collections.ActorCollection;
        this.collection.on('add sort reset', this.render, this);
        this.template = Handlebars.templates['actor-results.tpl'];
        this.render();
      },

      //render container template
      render: function() {
        var html = this.template();
        this.$el.empty();
        this.$el.append(html);
        this.collection.each(this.renderList, this);
        return this;
      },

      // render each of our actor results
      renderList: function(model, index) {
        var resultView = new ActorResultView({
          model: model,
          index: index
        });
        this.$el.children()
                .children()
                .children()
                .append(resultView.$el);
        this.childViews.push(resultView);
      },

      destroy: function() {
        _.each(this.childViews, function(view) {
          view.destroy();
        });
        this.undelegateEvents();
        this.remove();
      }
    });


    ///////////////////////////////////////////////////////////////////////////
    // ## INCIDENT LIST DISPLAY
    ///////////////////////////////////////////////////////////////////////////

    //render and individual result
    var IncidentResultView = Backbone.View.extend({
      events: {
        'click .toggle span': 'switchLanguage',
        'click input[type="checkbox"]': 'selectIncident'
      },
      initialize: function(options) {
        this.index = options.index;
        this.template = Handlebars.templates['incident.tpl'];
        this.model.on('change', this.render, this);
        this.model.on('destroy', this.destroy, this);
        this.render();
      },
      // dom event handlers
      switchLanguage: function(evt) {
        var clickedElement = evt.currentTarget,
            i18nElement = this.$el.children('td.is-description')
                              .children('a')
                              .children('div.i18n');
        Language.toggleLanguage(clickedElement, i18nElement);
      },
      selectIncident: function() {
        var checked = (this.model.get('checked') !== 'checked') ? 'checked' : '';
        this.model.set({checked: checked}, {silent: true});
        this.model.collection.trigger('change');
      },
      render: function() {
        var html = this.template({
          model: this.model.toJSON()
        });
        this.$el.addClass('result');
        this.$el.empty()
                .append(html);
        return this;
      },
      destroy: function() {
        this.undelegateEvents();
        this.remove();
      }

    });

    // Show the results of a search for actors
    var IncidentResultsView = Backbone.View.extend({
      el: '.body',
      childViews: [],

      initialize: function() {
        this.collection = Collections.IncidentCollection;
        this.collection.on('add sort reset', this.render, this);
        this.template = Handlebars.templates['incident-results.tpl'];
        this.render();
      },

      render: function() {
        this.$el.empty();
        var html = this.template();
        this.$el.empty().append(html);
        this.collection.each(this.renderList, this);
        return this;
      },

      renderList: function(model, index) {
        var resultView = new IncidentResultView({
          model: model,
          index: index
        });
        this.$el.children()
                .children()
                .children()
                .append(resultView.$el);
        this.childViews.push(resultView);
      },

      destroy: function() {
        _.each(this.childViews, function(view) {
          view.destroy();
        });
        this.undelegateEvents();
        this.remove();
      }

    });

    ///////////////////////////////////////////////////////////////////////////
    // ## BULLETIN LIST DISPLAY
    ///////////////////////////////////////////////////////////////////////////

    //render and individual result
    var BulletinResultView = Backbone.View.extend({
      tagName: 'tr',
      events: {
        'click .toggle span': 'switchLanguage',
        'click input[type="checkbox"]': 'selectBulletin'
      },

      initialize: function(options) {
        this.index = options.index;
        this.template = Handlebars.templates['bulletin.tpl'];
        this.model.on('change', this.render, this);
        this.model.on('destroy', this.destroy, this);
        this.render();
      },
      // dom event handlers
      switchLanguage: function(evt) {
        var clickedElement = evt.currentTarget,
            i18nElement = this.$el.children('td.is-description')
                              .children('a')
                              .children('div.i18n');
        Language.toggleLanguage(clickedElement, i18nElement);
      },
      selectBulletin: function() {
        var checked = (this.model.get('checked') !== 'checked') ? 'checked' : '';
        this.model.set({checked: checked}, {silent: true});
        this.model.collection.trigger('change');
      },

      render: function() {
        var html = this.template({
          model: this.model.toJSON()
        });
        this.$el.empty()
                .addClass('REPEAT Bulletin in-table')
                .append(html);
        return this;
      },

      destroy: function() {
        this.undelegateEvents();
        this.remove();
      }

    });

    // Show the results of a search for actors
    var BulletinResultsView = Backbone.View.extend({
      el: '.body',
      childViews: [],
      initialize: function() {
        this.collection = Collections.BulletinCollection;
        this.collection.on('add sort reset', this.render, this);
        this.template = Handlebars.templates['bulletin-results.tpl'];
        this.render();
      },

      render: function() {
        this.$el.empty();
        var html = this.template();
        this.$el.append(html);
        this.collection.each(this.renderList, this);
        return this;
      },
      renderList: function(model, index, list) {
        var resultView = new BulletinResultView({
          model: model,
          index: index
        });
        this.$el.children()
                .children()
                .children()
                .append(resultView.$el);
        this.childViews.push(resultView);
      },
      destroy: function() {
        _.each(this.childViews, function(view) {
          view.destroy();
        });
        this.undelegateEvents();
        this.remove();
      }

    });


    //////////////////////////////////////////////////////////////////////////
    // ## show/display results logic
    //////////////////////////////////////////////////////////////////////////
    
    var currentView;
    var destroy = function (view) {
      if (view !== undefined) {
        view.destroy();
      }
    };

    // show the actor search results view
    var showActors = function() {
      // destroy current view
      destroy(currentView);
      // show actor view
      var actorResultsView = new ActorResultsView();
    };
    var showBulletins = function() {
      // destroy current view
      destroy(currentView);
      // show actor view
      var bulletinsResultsView = new BulletinResultsView();
    };
    var showIncidents = function() {
      // destroy current view
      destroy(currentView);
      // show actor view
      var incidentResultsView = new IncidentResultsView();
    };

    var showCurrent = function(navValue) {
    };

    var displayInicidents = function() {};
    var displayBulletins = function() {};

    var actorClicked = function(value) { return value === 'actor'; };
    var incidentClicked = function(value) { return value === 'incident'; };
    var bulletinClicked = function(value) { return value === 'bulletin'; };

    //////////////////////////////////////////////////////////////////////////
    // ## init/destroy
    //////////////////////////////////////////////////////////////////////////
    var init = function () {
      // connect to the navStream to choose our initial result display
      var actorsSelected = Streams.navProperty
                                  .filter(actorClicked)
                                  //.onValue(showCurrent);
                                  .onValue(showActors);
                                  
      var incidentSelected = Streams.navProperty
                                    .filter(incidentClicked)
                                    .onValue(showIncidents);

      var bulletinSelected = Streams.navProperty
                                    .filter(bulletinClicked)
                                    .onValue(showBulletins);

    };

    return {
      init: init,
      destroy: destroy
    };

});

define(
  [
    'lib/SolrSearch/TextSearch',
    'managers/Manager.jquery',
    'core/ParameterStore'
  ], 
  function(TextSearch) {
    Manager = new AjaxSolr.Manager({
      solrUrl: 'http://127.0.0.1:8983/solr/collection1/'
    });
/*    Manager.addWidget(new AjaxSolr.CalendarWidget({
      id: 'calendar_incident',
      target: '#incident_date_filter',
      field: 'incident_times_exact'
    }));
    Manager.addWidget(new AjaxSolr.CalendarWidget({
      id: 'calendar_bulletin',
      target: '#bulletin_date_filter',
      field: 'bulletin_times_exact'
    }));
    Manager.addWidget(new AjaxSolr.TextWidget({
      id: 'text',
      target: '#docs',
      fields: ['type','sources']
    }));
    */

	var fields = [ 
    'bulletin_labels_exact',
    'bulletin_assigned_exact',
    'incident_labels_exact', 
    'incident_assigned_exact',
    'crimes_exact',
    'sources_exact',
    'civilian_en_exact',
    'age_en_exact',
    'sex_en_exact',
    'nationality_en_exact',
    'most_recent_status_bulletin_exact',
    'most_recent_status_incident_exact'
  ];

  /*
  _.each(fields, function(item, index, length) {
    Manager.addWidget(new AjaxSolr.labelsWidget({
      field: item,
      id: item
    }));
  });
  */


  /*
  Manager.addWidget(new AjaxSolr.CurrentFiltersWidget({
		id: 'currentfilters'
	}));

  Manager.addWidget(new AjaxSolr.EmbeddedSearchWidget({
    id: 'EmbeddedSearch',
    target: '#docs',
    fields: ['type','sources']
  }));
  */
  Manager.addWidget(new TextSearch({
    id: 'EmbeddedSearch',
    target: '#docs',
    fields: ['type','sources']
  }));


  Manager.init();
  Manager.store.addByValue('q', 'django_ct:*');
  var params = {
    facet: true,
    'facet.sort':'count',
    'facet.field': [ 
      'bulletin_labels_exact',
      'bulletin_assigned_exact',
      'incident_labels_exact', 
      'incident_assigned_exact',
      'crimes_exact',
      'sources_exact',
      'civilian_en_exact',
      'age_en_exact',
      'sex_en_exact',
      'nationality_en_exact',
      'most_recent_status_bulletin_exact',
      'most_recent_status_incident_exact' 
    ],
    'rows': 1000,
    'facet.limit': 1000,
    'facet.mincount': 1,
    'json.nl': 'map'
  };
  _.each(params, function(item, index, list) {
    Manager.store.addByValue(index, item);
  });

  //Manager.store.addByValue('sort', 'actor_created');

  return Manager;
});
