{
  "name": "bacon-ui",
  "version": "0.1.1",
  "main": "./Bacon.UI.js",
  "gitHead": "70c1ac3055fefe3d5c424e018471444873df1a8c",
  "readme": "Some helpers for constructing jQuery UIs with Bacon.js. This is stuff that I've extracted from more specific codebases and that's too UI-specific to qualify for inclusion in Bacon.js.\n\n### Bacon.UI.textFieldValue(textfield)\n\nReturns the value of a textfield (jQuery object) as a Property. Currently bound to keyups, input, cut, paste.\n\n    var username = Bacon.UI.textFieldValue($(\"#username\"))\n\n### Bacon.UI.optionValue(optionField, initValue)\n\nReturns the value of an option field (jQuery object) as a Property.\n\nOptionally, you can define `initValue`, which will set it as the initial value\nof the underlying `<select>` HTML element.\n\n#### Example usage:\n\nGiven HTML like this:\n\n    <select id=\"doneness-level\">\n      <option value=\"raw\">Raw doneness level</option>\n      <option value=\"medium\">Medium doneness level</option>\n    </select>\n\nYou can do like this:\n\n    var baconRoastingLevel = Bacon.UI.optionValue(\n      $('#doneness-level'),\n      'medium' // Set the select element initially to value \"medium\"\n    )\n\n### Bacon.UI.checkBoxGroupValue(checkBoxes, initValue)\n\nReturns the value of a checkbox group (jQuery object representing multiple checkboxes) as a Property. The value will be an array containing the values of selected checkboxes. The optional `initValue` param can be used to set the initial state.\n\nNow suppose you have three checkboxes for selecting the media for customer contacts:\n\n    <input type=\"checkbox\" value=\"email\"/>\n    <input type=\"checkbox\" value=\"sms\"/>\n    <input type=\"checkbox\" value=\"snailmail\"/>\n\nTo set up a property containing selected media, with \"sms\" initially selected:\n\n    var selectedMedia = Bacon.UI.checkBoxGroupValue($(\"input\"), [\"sms\"])\n\n### Bacon.EventStream.ajax(fn)\n\nPerforms an AJAX request on each event of your stream, collating results in the result stream.\n\nThe source stream is expected to provide the parameters for the AJAX call.\n\n    var usernameRequest = username.map(function(un) { return { type: \"get\", url: \"/usernameavailable/\" + un } })\n    var usernameAvailable = username.changes().ajax()\n\nInstall\n=======\n\nYou can download the latest [generated javascript](https://raw.github.com/raimohanska/Bacon.UI.js/master/Bacon.UI.js).\n\n..or you can use script tags to include this file directly from Github:\n\n```html\n<script src=\"https://raw.github.com/raimohanska/Bacon.UI.js/master/Bacon.UI.js\"></script>\n```\n\nIf you're targeting to [node.js](http://nodejs.org/), you can\n\n    npm install baconui\n\nFor [bower](https://github.com/twitter/bower) users:\n\n    bower install bacon-ui\n    \n## Running tests\n\n### On command-line interface\n\n1. Install <http://phantomjs.org/>\n2. `./run-tests.sh`\n\n### On browser\n\n1. Install <http://phantomjs.org/>\n2. `python -m SimpleHTTPServer 9999`\n3. go to <http://localhost:9999/test/runner.html>\n\n### Running tests on Travis-ci.org\n\nIt can be done. Are you the one to do this?\n",
  "readmeFilename": "README.md",
  "_id": "bacon-ui@0.1.1",
  "description": "Some helpers for constructing jQuery UIs with Bacon.js. This is stuff that I've extracted from more specific codebases and that's too UI-specific to qualify for inclusion in Bacon.js.",
  "repository": {
    "type": "git",
    "url": "git://github.com/raimohanska/Bacon.UI.js.git"
  }
}